:= /

Program -> Statement
Program -> Statement [dot] Program

Statement -> Declaration
Statement -> Formula

Formula -> Or 
Formula -> Rule
Formula -> Iff
Formula -> Contradiction

Or -> OrAtoms                  		 := xs : Or(xs)			
OrAtoms -> Atom [or] OrAtoms   		 := x, xs : [x] + xs		
Or -> Atom	               		 := x : [x]

Rule -> Atoms [Arrow] Atoms	 	 := b, h : If(b, h)

Iff -> Atoms [DoubleArrow] Atoms	 := xs, ys : Iff(xs, ys)

Contradiction -> Atoms [Implies] [False] := xs : Never(xs)

Atom -> [not] Atom 			 := x : x.negate()
Atom -> Token Comparison Token
Atom -> Token [(] Tokens [)] 		 := p, xs : Term([p] + xs)
Atoms -> Atom				 := x : [x]
Atoms -> Atom [,] Atoms			 := x, xs : [x] + [xs]

Tokens -> Token			 	 := x : [x]
Tokens -> Token [,] Tokens               := x, xs : [x] + xs

comp -> equal
comp -> notequal

equal -> =
notequal -> =!=

Declaration -> Tokens [:] Token
Declaration -> [order] Natural [:] Token
Declaration -> Token [:] Tokens [->] Token

Token -> Word                            := x : Term(x, [])
Token -> Word [.] Dotted                 := x, xs : Term(x, xs)

Dotted -> Word                           := x : [x]
Dotted -> Word [.] Dotted                := x, xs : [x] + xs

-- Word and Natural should be defined externally, and
-- assigned to every token passed to Parser.parse()
