:= /

Line -> Statement [dot]                  := x : x
dot -> .                                 := x : x

Statement -> Declaration                 := x : x
Statement -> Formula                     := x : x

Formula -> Or                            := x : x
Formula -> Rule                          := x : x
Formula -> Iff                           := x : x
Formula -> Contradiction                 := x : x

Or -> OrAtoms                  		 := xs : Or(xs)			
OrAtoms -> Atom [or] OrAtoms   		 := x, xs : [x] + xs		
Or -> Atom	               		 := x : [x]

Rule -> Atoms [Arrow] Atoms	 	 := b, h : If(b, h)

Iff -> Atoms [DoubleArrow] Atoms	 := xs, ys : Iff(xs, ys)

Contradiction -> Atoms [Implies] [False] := xs : Never(xs)

Atom -> [not] Atom 			 := x : x.negate()
Atom -> Token comp Token                 := x, c, y : Comparison(c, x, y)
Atom -> Token [(] Tokens [)] 		 := p, xs : Term([p] + xs)
Atoms -> Atom				 := x : [x]
Atoms -> Atom [,] Atoms			 := x, xs : [x] + [xs]

Tokens -> Token			 	 := x : [x]
Tokens -> Token [,] Tokens               := x, xs : [x] + xs

comp -> equal                            := x : x
comp -> notequal                         := x : x

equal -> =                               := x : x
notequal -> !=                           := x : x

Declaration -> Tokens [:] Token             := consts, sort : ('append', consts, sort) 
Declaration -> [order] Natural [:] Token    := size, sort : ('order', size, sort)
Declaration -> Token [:] Tokens [->] Token  := f, dom, im : ('let', f, dom, im)

Token -> Word                            := x : Term(x, [])
Token -> Word [.] Dotted                 := x, xs : Term(x, xs)

Dotted -> Word                           := x : [x]
Dotted -> Word [.] Dotted                := x, xs : [x] + xs

-- Word and Natural should be defined externally, and
-- assigned to every token passed to Parser.parse()

-- A program should be split into lines, and each line parsed
-- separately (which is something we can do with the current
-- Tatsu parser)
